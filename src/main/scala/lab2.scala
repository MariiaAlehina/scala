package alokhina.lab1


object task2_1 extends App{
  // Напишіть клас Time з властивостями hours і minutes,
  // доступними тільки для читання, і методом before (other: Time): Boolean,
  // який перевіряє, чи передує час this часу other.
  // Об'єкт Time повинен конструюватися як new Time (hrs, min),
  // де hrs - час в 24-годинному форматі.

}

object task2_1_2 extends App{
  // Зробіть так, щоб усередині час було представлено кількістю хвилин,
  // що минули з початку доби (між 0 і 24 60 - 1).
  // Загальнодоступний інтерфейс при цьому не повинен змінитися.
  // Тобто ці зміни не повинні впливати на клієнтський код.

}

object task2_2 extends App{
  // Напишіть клас Person з головним конструктором,
  // які приймають рядок, яка містить ім'я,
  // пробіл і прізвище, наприклад: new Person ( «Fred Smith»).
  // Зробіть властивості firstName і lastName доступними тільки для читання.

}

object task2_3 extends App{
  // Створіть клас Car з властивостями, що визначають виробника,
  // назву моделі і рік виробництва, які доступні тільки для читання,
  // і властивість з реєстраційним номером автомобіля, доступне для читання/запису.
  // Додайте чотири конструктора. Всі вони повинні приймати назву виробника
  // та назву моделі. При необхідності у виклику конструктора можуть також вказуватися рік
  // і реєстраційний номер. Якщо рік не вказано, він повинен встановлюватися рівним -1,
  // а при відсутності реєстраційного номера повинна встановлюватися порожній рядок.

}

object task2_4 extends App{
  // Визначте для класу Car об'єкт-компаньйон,
  // щоб можна було конструювати екземпляри Car,
  // як Car ( "BMW", "735"), без ключового слова new.

}

object task2_5 extends App{
  // Напишіть Enumeration, яке описує вісім кутів куба RGB.
  // Як числових ідентифікаторів повинні використовуватися
  // значення кольору (наприклад, 0xff0000 - для Red).

}

object task2_6 extends App{
  // Напишіть програму, що копіює всі елементи з Java-хешу в Scala-хеш.
  // Використовуйте операцію імпортування для перейменування обох класів.

}

object task2_7 extends App{
  // Напишіть програму, що імпортує клас java.lang.System,
  // читає ім'я користувача з системного властивості user.name,
  // пароль з об'єкта Console і виводить повідомлення в стандартний потік помилок,
  // якщо пароль недостатньо «секретний». В іншому випадку програма повинна вивести
  // вітання в стандартний потік виведення. Чи не імпортуйте нічого іншого
  // і не використовуйте повні кваліфіковані імена (з точками).

}

object task2_8 extends App{
  // Визначте клас CheckingAccount, що успадковує клас BankAccount,
  // який стягує $ 1 комісійних за кожну операцію поповнення або списання.

}

object task2_9 extends App{
  // Визначте клас SavingsAccount, що успадковує клас BankAccount
  // з попередньої вправи, який нараховує відсотки щомісяця(викликом методу earnMonthlyInterest)
  // і дозволяє безкоштовно виконувати три операції зарахування
  // або списання кожного місяця. Метод earnMonthlyInterest повинен скидати лічильник транзакцій.

}

object task2_10 extends App{
  // Визначте абстрактний клас геометричної фігури Shape
  // з абстрактним методом centerPoint і підкласи прямокутника і кола,
  // Rectangle і Circle. Реалізуйте відповідні конструктори в підкласах
  // і перевизначите метод centerPoint в кожному підкласі.

}
